{"version":3,"sources":["components/CreditForm.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["CreditForm","props","description","setDescription","price","setPrice","paymentTerms","setPaymentTerms","paymentType","setPayment","results","setResults","calcPayments","payment","paymentTypeWord","word","action","method","className","onSubmit","e","preventDefault","id","shortid","generate","text","htmlFor","type","name","value","onChange","target","Number","min","Results","map","result","key","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac14257d.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from 'shortid';\r\n\r\nfunction CreditForm(props) {\r\n\tconst {\r\n\t\tdescription,\r\n\t\tsetDescription,\r\n\t\tprice,\r\n\t\tsetPrice,\r\n\t\tpaymentTerms,\r\n\t\tsetPaymentTerms,\r\n\t\tpaymentType,\r\n\t\tsetPayment,\r\n\t\tresults,\r\n\t\tsetResults,\r\n\t} = props;\r\n\tconst calcPayments = () => {\r\n\t\tlet payment;\r\n\t\tswitch (paymentType) {\r\n\t\t\tcase 'w':\r\n\t\t\t\tpayment = price / paymentTerms / 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'q':\r\n\t\t\t\tpayment = price / paymentTerms / 2;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tpayment = price / paymentTerms;\r\n\t\t}\r\n\t\treturn payment;\r\n\t};\r\n\r\n\tconst paymentTypeWord = () => {\r\n\t\tlet word;\r\n\t\tswitch (paymentType) {\r\n\t\t\tcase 'w':\r\n\t\t\t\tword = 'semanales';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'q':\r\n\t\t\t\tword = 'quincenales';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tword = 'mensuales';\r\n\t\t}\r\n\t\treturn word;\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetResults([\r\n\t\t\t...results,\r\n\t\t\t{\r\n\t\t\t\tid: shortid.generate(),\r\n\t\t\t\tdescription,\r\n\t\t\t\tprice,\r\n\t\t\t\ttext: `Sus pagos ${paymentTypeWord()} son de $${calcPayments()}`,\r\n\t\t\t},\r\n\t\t]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form action=\"#\" method=\"POST\" className=\"form\" onSubmit={handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"description\">Descripción</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tid=\"description\"\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tvalue={description}\r\n\t\t\t\t\tonChange={(e) => setDescription(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"price\">Precio</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tid=\"price\"\r\n\t\t\t\t\tname=\"price\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tvalue={price}\r\n\t\t\t\t\tonChange={(e) => setPrice(Number(e.target.value))}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"payment-terms\">Plazos pago (meses)</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tid=\"payment-terms\"\r\n\t\t\t\t\tname=\"payment-terms\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\tvalue={paymentTerms}\r\n\t\t\t\t\tonChange={(e) => setPaymentTerms(Number(e.target.value))}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"payment-type\">Tipo abono</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tvalue={paymentType}\r\n\t\t\t\t\tonChange={(e) => setPayment(e.target.value)}\r\n\t\t\t\t\tid=\"payment-type\"\r\n\t\t\t\t\tname=\"payment-type\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"w\">Semanal</option>\r\n\t\t\t\t\t<option value=\"q\">Quincenal</option>\r\n\t\t\t\t\t<option value=\"m\">Mensual</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<input type=\"submit\" value=\"Calcular\" className=\"btn\" />\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default CreditForm;\r\n","import React from 'react';\r\n\r\nfunction Results({ results }) {\r\n\treturn (\r\n\t\t<ul className=\"results\">\r\n\t\t\t{results.map((result) => (\r\n\t\t\t\t<li className=\"result\" key={result.id}>\r\n\t\t\t\t\t<span className=\"description\">{result.description}</span>\r\n\t\t\t\t\t<span className=\"price\">${result.price}</span>\r\n\t\t\t\t\t<p className=\"result-text\">{result.text}</p>\r\n\t\t\t\t</li>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default Results;\r\n","import React, { useState } from 'react';\nimport CreditForm from './components/CreditForm';\nimport Results from './components/Results';\n\nfunction App() {\n\tconst [description, setDescription] = useState('');\n\tconst [price, setPrice] = useState(0);\n\tconst [paymentTerms, setPaymentTerms] = useState(1);\n\tconst [paymentType, setPayment] = useState('w');\n\tconst [results, setResults] = useState([]);\n\n\treturn (\n\t\t<>\n\t\t\t<h1 className=\"title\">Control de crédito</h1>\n\t\t\t<CreditForm\n\t\t\t\tdescription={description}\n\t\t\t\tsetDescription={setDescription}\n\t\t\t\tprice={price}\n\t\t\t\tsetPrice={setPrice}\n\t\t\t\tpaymentTerms={paymentTerms}\n\t\t\t\tsetPaymentTerms={setPaymentTerms}\n\t\t\t\tpaymentType={paymentType}\n\t\t\t\tsetPayment={setPayment}\n\t\t\t\tresults={results}\n\t\t\t\tsetResults={setResults}\n\t\t\t/>\n\t\t\t<Results results={results} />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}